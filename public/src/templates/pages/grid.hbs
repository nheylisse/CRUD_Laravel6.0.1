{{!-- buttons.hbs --}}
{{#> layout title=pageTitle parentPage='ui-elements' firstLevelChild='grid'}}

	{{#*inline "head-block"}}	
		<link rel="stylesheet" type="text/css" href="assets/pages/demo.css">
	{{/inline}}

	{{#*inline "sa-page-content"}}
		<div class="well">
			<h1>Grid options</h1>
			<p>While Bootstrap uses <code class="highlighter-rouge">em</code>s or <code class="highlighter-rouge">rem</code>s for defining most sizes, <code class="highlighter-rouge">px</code>s are used for grid breakpoints and container widths. This is because the viewport width is in pixels and does not change with the <a href="https://drafts.csswg.org/mediaqueries-3/#units">font size</a>.</p>
			<p>See how aspects of the Bootstrap grid system work across multiple devices with a handy table.</p>
			<br>
			<div class="row">
				<div class="col-sm-3 col-12">
					<img src="assets/img/demo/e-comm/responseimg.png" alt="">
					<h3>BuiltWith Bootstrap</h3>
					<p>Bootstrap is made to not only look and behave great in the latest desktop browsers, but in tablet and smartphone browsers too. It’s packed with great features. Such as the 12-column responsive mobile first grid, dozens of components, plugins and more!</p>

				</div>
				<div class="col-sm-9 col-12">
					<table class="table table-bordered table-striped">
						<thead>
							<tr>
								<th></th>
								<th class="text-center">
								Extra small<br>
								<small>&lt;576px</small>
								</th>
								<th class="text-center">
								Small<br>
								<small>≥576px</small>
								</th>
								<th class="text-center">
								Medium<br>
								<small>≥768px</small>
								</th>
								<th class="text-center">
								Large<br>
								<small>≥992px</small>
								</th>
								<th class="text-center">
								Extra large<br>
								<small>≥1200px</small>
								</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th class="text-nowrap" scope="row">Max container width</th>
								<td>None (auto)</td>
								<td>540px</td>
								<td>720px</td>
								<td>960px</td>
								<td>1140px</td>
							</tr>
							<tr>
								<th class="text-nowrap" scope="row">Class prefix</th>
								<td><code>.col-</code></td>
								<td><code>.col-sm-</code></td>
								<td><code>.col-md-</code></td>
								<td><code>.col-lg-</code></td>
								<td><code>.col-xl-</code></td>
							</tr>
							<tr>
								<th class="text-nowrap" scope="row"># of columns</th>
								<td colspan="5">12</td>
							</tr>
							<tr>
								<th class="text-nowrap" scope="row">Gutter width</th>
								<td colspan="5">30px (15px on each side of a column)</td>
							</tr>
							<tr>
								<th class="text-nowrap" scope="row">Nestable</th>
								<td colspan="5">Yes</td>
							</tr>
							<tr>
								<th class="text-nowrap" scope="row">Column ordering</th>
								<td colspan="5">Yes</td>
							</tr>
						</tbody>
					</table>
				</div>
				{{!-- .col-12 col-sm-9 end --}}
			</div>
			{{!-- .row end --}}
		</div>
		<h3 class="text-bold">Auto-layout columns</h3>
		<p>Utilize breakpoint-specific column classes for easy column sizing without an explicit numbered class like <code>.col-sm-6</code>.</p>
		<h6>Equal-width</h6>
		<p>For example, here are two grid layouts that apply to every device and viewport, from <code>xs</code> to <code>xl</code>. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.</p>

		<div class="well">
			<div class="col">
				<div class="row show-grid">
				  <div class="col">
				    1 of 2
				  </div>
				  <div class="col">
				    2 of 2
				  </div>
				</div>
				<div class="row show-grid">
				  <div class="col">
				    1 of 3
				  </div>
				  <div class="col">
				    2 of 3
				  </div>
				  <div class="col">
				    3 of 3
				  </div>
				</div>					
			</div>

<pre>
&lt;div class="row"&gt;
    &lt;div class="col"&gt;
      1 of 2
    &lt;/div&gt;
    &lt;div class="col"&gt;
      2 of 2
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;div class="col"&gt;
      1 of 3
    &lt;/div&gt;
    &lt;div class="col"&gt;
      2 of 3
    &lt;/div&gt;
    &lt;div class="col"&gt;
      3 of 3
    &lt;/div&gt;
&lt;/div&gt;
</pre>


			<p>Equal-width columns can be broken into multiple lines, but there was a <a href="https://github.com/philipwalton/flexbugs#11-min-and-max-size-declarations-are-ignored-when-wrapping-flex-items" target="_blank">Safari flexbox bug</a> that prevented this from working without an explicit <code>flex-basis</code> or <code>border</code>. There are workarounds for older browser versions, but they shouldn’t be necessary if you’re up-to-date.</p>
			<div class="col">
				<div class="row show-grid">
					<div class="col">Column</div>
					<div class="col">Column</div>
					<div class="w-100"></div>
					<div class="col">Column</div>
					<div class="col">Column</div>
				</div>				
			</div>
<pre>
&lt;div class="row">
    &lt;div class="col">Column&lt;/div>
    &lt;div class="col">Column&lt;/div>
    &lt;div class="w-100">&lt;/div>
    &lt;div class="col">Column&lt;/div>
    &lt;div class="col">Column&lt;/div>
&lt;/div>
</pre>
		</div>
		<h3 class="text-bold">Setting one column width</h3>
		<p>Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.</p>
		<div class="well">
			<div class="col">
				<div class="row show-grid">
					<div class="col">
					1 of 3
					</div>
					<div class="col-6">
					2 of 3 (wider)
					</div>
					<div class="col">
					3 of 3
					</div>
				</div>
				<div class="row show-grid">
					<div class="col">
					1 of 3
					</div>
					<div class="col-5">
					2 of 3 (wider)
					</div>
					<div class="col">
					3 of 3
					</div>
				</div>				
			</div>
<pre>
&lt;div class="row">
    &lt;div class="col">
    1 of 3
    &lt;/div>
    &lt;div class="col-6">
    2 of 3 (wider)
    &lt;/div>
    &lt;div class="col">
    3 of 3
&lt;/div>
&lt;/div>
&lt;div class="row">
    &lt;div class="col">
    1 of 3
    &lt;/div>
    &lt;div class="col-5">
    2 of 3 (wider)
    &lt;/div>
    &lt;div class="col">
    3 of 3
    &lt;/div>
&lt;/div>
</pre>
		</div>
		<h3 class="text-bold">Variable width content</h3>
		<p>Use <code>col-{breakpoint}-auto</code> classes to size columns based on the natural width of their content.</p>
		<div class="well">
			<div class="col">
				<div class="row justify-content-md-center show-grid">
					<div class="col col-lg-2">
					1 of 3
					</div>
					<div class="col-md-auto">
					Variable width content
					</div>
					<div class="col col-lg-2">
					3 of 3
					</div>
				</div>
				<div class="row  show-grid">
					<div class="col">
					1 of 3
					</div>
					<div class="col-md-auto">
					Variable width content
					</div>
					<div class="col col-lg-2">
					3 of 3
					</div>
				</div>
			</div>
<pre>
&lt;div class="row justify-content-md-center">
    &lt;div class="col col-lg-2">
    1 of 3
    &lt;/div>
    &lt;div class="col-md-auto">
    Variable width content
    &lt;/div>
    &lt;div class="col col-lg-2">
    3 of 3
    &lt;/div>
&lt;/div>
&lt;div class="row">
    &lt;div class="col">
    1 of 3
    &lt;/div>
    &lt;div class="col-md-auto">
    Variable width content
    &lt;/div>
    &lt;div class="col col-lg-2">
    3 of 3
    &lt;/div>
&lt;/div>
</pre>
		</div>
		<h3 class="text-bold">Equal-width multi-row</h3>
		<p>Create equal-width columns that span multiple rows by inserting a <code>.w-100</code> where you want the columns to break to a new line. Make the breaks responsive by mixing the <code>.w-100</code> with some <a href="https://getbootstrap.com/docs/4.0/utilities/display/" target="_blank">responsive display utilities</a>.</p>
		<div class="well">
			<div class="col">
				<div class="row show-grid">
					<div class="col">col</div>
					<div class="col">col</div>
					<div class="w-100"></div>
					<div class="col">col</div>
					<div class="col">col</div>
				</div>				
			</div>
<pre>
&lt;div class="row">
  &lt;div class="col">col&lt;/div>
  &lt;div class="col">col&lt;/div>
  &lt;div class="w-100">&lt;/div>
  &lt;div class="col">col&lt;/div>
  &lt;div class="col">col&lt;/div>
&lt;/div>
</pre>
		</div>
		<h3 class="text-bold">Responsive classes</h3>
		<p>Bootstrap’s grid includes five tiers of predefined classes for building complex responsive layouts. Customize the size of your columns on extra small, small, medium, large, or extra large devices however you see fit.</p>
		<h3 class="text-bold">All breakpoints</h3>
		<p>For grids that are the same from the smallest of devices to the largest, use the <code>.col</code> and <code>.col-*</code> classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to <code>.col</code>.</p>
		<div class="well">
			<div class="col">
				<div class="row show-grid">
				  <div class="col">col</div>
				  <div class="col">col</div>
				  <div class="col">col</div>
				  <div class="col">col</div>
				</div>
				<div class="row show-grid">
				  <div class="col-8">col-8</div>
				  <div class="col-4">col-4</div>
				</div>
			</div>
<pre>
&lt;div class="row">
  &lt;div class="col">col&lt;/div>
  &lt;div class="col">col&lt;/div>
  &lt;div class="col">col&lt;/div>
  &lt;div class="col">col&lt;/div>
&lt;/div>
&lt;div class="row">
  &lt;div class="col-8">col-8&lt;/div>
  &lt;div class="col-4">col-4&lt;/div>
&lt;/div>
</pre>
		</div>
		<h3 class="text-bold">Nesting</h3>
		<p>To nest your content with the default grid, add a new .row and set of .col-sm-* columns within an existing .col-sm-* column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).</p>
		<div class="well">
			<div class="col">
				<div class="row show-grid">
				  <div class="col-sm-9">
				    Level 1: .col-sm-9
				    <div class="row show-grid">
				      <div class="col-8 col-sm-6">
				        Level 2: .col-8 .col-sm-6
				      </div>
				      <div class="col-4 col-sm-6">
				        Level 2: .col-4 .col-sm-6
				      </div>
				    </div>
				  </div>
				</div>
			</div>
<pre>
&lt;div class="row">
  &lt;div class="col-sm-9">
    Level 1: .col-sm-9
    &lt;div class="row">
      &lt;div class="col-8 col-sm-6">
        Level 2: .col-8 .col-sm-6
      &lt;/div>
      &lt;div class="col-4 col-sm-6">
        Level 2: .col-4 .col-sm-6
      &lt;/div>
    &lt;/div>
  &lt;/div>
&lt;/div>
</pre>
		</div>
		<h3 class="text-bold">Display property</h3>

		<div class="well">
			<h6>Hiding elements</h6>
			<p>For faster mobile-friendly development, use responsive display classes for showing and hiding elements by device. Avoid creating entirely different versions of the same site, instead hide element responsively for each screen size.</p>

			<p>To hide elements simply use the <code>.d-none</code> class or one of the <code>.d-{sm,md,lg,xl}-none</code> classes for any responsive screen variation.</p>

			<p>To show an element only on a given interval of screen sizes you can combine one <code>.d-*-none</code> class with a <code>.d-*-*</code> class, for example <code>.d-none</code> <code>.d-md-block</code> <code>.d-xl-none</code> will hide the element for all screen sizes except on medium and large devices.</p>
			<table class="table table-striped table-bordered">
			  <thead>
			    <tr>
			      <th>Screen Size</th>
			      <th>Class</th>
			    </tr>
			  </thead>
			  <tbody>
			    <tr>
			      <td>Hidden on all</td>
			      <td><code class="highlighter-rouge">.d-none</code></td>
			    </tr>
			    <tr>
			      <td>Hidden only on xs</td>
			      <td><code class="highlighter-rouge">.d-none .d-sm-block</code></td>
			    </tr>
			    <tr>
			      <td>Hidden only on sm</td>
			      <td><code class="highlighter-rouge">.d-sm-none .d-md-block</code></td>
			    </tr>
			    <tr>
			      <td>Hidden only on md</td>
			      <td><code class="highlighter-rouge">.d-md-none .d-lg-block</code></td>
			    </tr>
			    <tr>
			      <td>Hidden only on lg</td>
			      <td><code class="highlighter-rouge">.d-lg-none .d-xl-block</code></td>
			    </tr>
			    <tr>
			      <td>Hidden only on xl</td>
			      <td><code class="highlighter-rouge">.d-xl-none</code></td>
			    </tr>
			    <tr>
			      <td>Visible on all</td>
			      <td><code class="highlighter-rouge">.d-block</code></td>
			    </tr>
			    <tr>
			      <td>Visible only on xs</td>
			      <td><code class="highlighter-rouge">.d-block .d-sm-none</code></td>
			    </tr>
			    <tr>
			      <td>Visible only on sm</td>
			      <td><code class="highlighter-rouge">.d-none .d-sm-block .d-md-none</code></td>
			    </tr>
			    <tr>
			      <td>Visible only on md</td>
			      <td><code class="highlighter-rouge">.d-none .d-md-block .d-lg-none</code></td>
			    </tr>
			    <tr>
			      <td>Visible only on lg</td>
			      <td><code class="highlighter-rouge">.d-none .d-lg-block .d-xl-none</code></td>
			    </tr>
			    <tr>
			      <td>Visible only on xl</td>
			      <td><code class="highlighter-rouge">.d-none .d-xl-block</code></td>
			    </tr>
			  </tbody>
			</table>
		</div>

	{{/inline}}
{{/layout}}